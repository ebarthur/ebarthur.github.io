---
import type { MarkdownHeading } from "astro";
import AdetonAd from "./AdetonAd.astro";
import Anchor from "./Anchor.astro";

type Props = {
  headings: MarkdownHeading[];
};

const { headings } = Astro.props;
---

<aside class="col-span-1 hidden lg:block sticky top-15dvh h-fit text-sm">
  <div class="rounded-lg px-2">
    {
      headings.length > 1 && (
        <>
          <header class="flex items-center text-lg gap-2 italic">
            <span class="i-solar-posts-carousel-vertical-line-duotone" />
            Jump to
          </header>

          <ul class="mx-2 list-none space-y-1">
            {headings.map((h) => (
              <li>
                <Anchor
                  class="!no-underline hover:underline block overflow-hidden whitespace-nowrap text-ellipsis"
                  class:list={[{ "ms-4": h.depth === 3 }]}
                  href={`#${h.slug}`}
                >
                  {h.text}
                </Anchor>
              </li>
            ))}
          </ul>
        </>
      )
    }

    <div class="mt-4">
      <AdetonAd />
    </div>
  </div>
</aside>

<script>
  document.addEventListener("astro:page-load", () => {
    const links = document.querySelectorAll("aside a[href^='#']");
    if (!links.length) return;

    const headings = Array.from(links)
      .map((link) =>
        document.getElementById(link.getAttribute("href")!.slice(1))
      )
      .filter(Boolean);

    if (!headings.length) return;

    function updateActive() {
      let active = 0;
      for (let i = headings.length - 1; i >= 0; i--) {
        if (headings[i]!.getBoundingClientRect().top <= 100) {
          active = i;
          break;
        }
      }

      for (let i = 0; i < links.length; i++) {
        const isActive = i === active;
        links[i].classList.toggle("text-pink-400", isActive);
      }
    }

    window.addEventListener("scroll", updateActive, { passive: true });
    window.addEventListener("hashchange", updateActive);

    setTimeout(updateActive, 100);
  });
</script>
